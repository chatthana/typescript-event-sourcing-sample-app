version: '3.9'
services:
  mongodb:
    container_name: cqrs-es-mongodb
    image: mongo:4.4
    restart: unless-stopped
    ports:
      - 27017:27017
  redis:
    container_name: cqrs-es-redis
    image: redis:6
    restart: unless-stopped
    ports:
      - 6379:6379
  zookeeper:
    container_name: cqrs-es-zookeeper
    image: confluentinc/cp-zookeeper:7.2.0
    restart: unless-stopped
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    container_name: cqrs-es-kafka
    image: confluentinc/cp-kafka:7.2.0
    restart: unless-stopped
    ports:
      - 9092:9092
    expose:
      - 29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT_HOST://0.0.0.0:9092,PLAINTEXT://0.0.0.0:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
  init-kafka:
    image: confluentinc/cp-kafka:7.2.0
    depends_on:
      - kafka
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
        kafka-topics --bootstrap-server kafka:29092 --list
        
        echo -e 'Creating topics ...'
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic job --replication-factor 1 --partitions 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic application --replication-factor 1 --partitions 1
        
        echo -e 'Successfully created topics:'
        kafka-topics --bootstrap-server kafka:29092 --list
      "
  cassandra:
    image: cassandra:4
    ports:
      - 9042:9042
    environment:
      CASSANDRA_CLUSTER_NAME: cqrs_es_cluster
  job:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_CONTEXT: job
    ports:
      - 3000:3000
    environment:
      NODE_ENV: dev
      API_PORT: 3000
      MONGODB_URI: mongodb://mongodb:27017
      DB_NAME: job-dev
      REDIS_URI: redis://redis:6379
      KAFKA_BROKER_LIST: kafka:29092
      KAFKA_CONSUMER_GROUP_ID: cqrs-es-job.dev
      KAFKA_TOPICS_TO_SUBSCRIBE: job
    depends_on:
      - kafka
      - mongodb
      - redis
  application:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_CONTEXT: application
    ports:
      - 4000:3000
    environment:
      NODE_ENV: dev
      API_PORT: 3000
      MONGODB_URI: mongodb://mongodb:27017
      DB_NAME: application-dev
      REDIS_URI: redis://redis:6379
      KAFKA_BROKER_LIST: kafka:29092
      KAFKA_CONSUMER_GROUP_ID: cqrs-es-application.dev
      KAFKA_TOPICS_TO_SUBSCRIBE: application,job
    depends_on:
      - kafka
      - mongodb
      - redis

networks:
  default:
    name: cqrs-es-net